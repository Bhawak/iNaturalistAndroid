/* *****************************************************************************
 * Copyright (c) 2017 Evernote Corporation.
 * This software was generated by Evernoteâ€™s Android-State code generator
 * (available at https://github.com/evernote/android-state), which is made
 * available under the terms of the Eclipse Public License v1.0
 * (available at http://www.eclipse.org/legal/epl-v10.html).
 * For clarification, code generated by the Android-State code generator is
 * not subject to the Eclipse Public License and can be used subject to the
 * following terms:
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *******************************************************************************/
package org.inaturalist.android;

import android.os.Bundle;
import com.evernote.android.state.Bundler;
import com.evernote.android.state.InjectionHelper;
import com.evernote.android.state.Injector;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;

public class ObservationViewerActivity$$StateSaver<T extends ObservationViewerActivity> extends Injector.Object<T> {
  private static final HashMap<String, Bundler<?>> BUNDLERS = new HashMap<String, Bundler<?>>();

  private static final InjectionHelper HELPER = new InjectionHelper("org.inaturalist.android.ObservationViewerActivity$$StateSaver", BUNDLERS);

  static {
    BUNDLERS.put("mCommentsIds", new AndroidStateBundlers.BetterJSONListBundler());
    BUNDLERS.put("mFavorites", new AndroidStateBundlers.BetterJSONListBundler());
    BUNDLERS.put("mObservation", new AndroidStateBundlers.SerializableBundler());
    BUNDLERS.put("mObservationSubscriptions", new AndroidStateBundlers.JSONArrayBundler());
    BUNDLERS.put("mProjects", new AndroidStateBundlers.BetterJSONListBundler());
    BUNDLERS.put("mTaxon", new AndroidStateBundlers.JSONObjectBundler());
  }

  @Override
  @SuppressWarnings("unchecked")
  public void save(T target, Bundle state) {
    HELPER.putString(state, "mActiveTab", target.mActiveTab);
    HELPER.putSerializable(state, "mAttributes", target.mAttributes);
    HELPER.putInt(state, "mCommentCount", target.mCommentCount);
    HELPER.putWithBundler(state, "mCommentsIds", target.mCommentsIds);
    HELPER.putWithBundler(state, "mFavorites", target.mFavorites);
    HELPER.putBoolean(state, "mFlagAsCaptive", target.mFlagAsCaptive);
    HELPER.putBoolean(state, "mFollowingObservation", target.mFollowingObservation);
    HELPER.putInt(state, "mIdCount", target.mIdCount);
    HELPER.putString(state, "mObsJson", target.mObsJson);
    HELPER.putWithBundler(state, "mObservation", target.mObservation);
    HELPER.putWithBundler(state, "mObservationSubscriptions", target.mObservationSubscriptions);
    HELPER.putWithBundler(state, "mProjects", target.mProjects);
    HELPER.putBoolean(state, "mReadOnly", target.mReadOnly);
    HELPER.putBoolean(state, "mReloadTaxon", target.mReloadTaxon);
    HELPER.putWithBundler(state, "mTaxon", target.mTaxon);
    HELPER.putString(state, "mTaxonIdName", target.mTaxonIdName);
    HELPER.putString(state, "mTaxonImage", target.mTaxonImage);
    HELPER.putString(state, "mTaxonJson", target.mTaxonJson);
    HELPER.putString(state, "mTaxonRank", target.mTaxonRank);
    HELPER.putInt(state, "mTaxonRankLevel", target.mTaxonRankLevel);
    HELPER.putString(state, "mTaxonScientificName", target.mTaxonScientificName);
  }

  @Override
  @SuppressWarnings("unchecked")
  public void restore(T target, Bundle state) {
    target.mActiveTab = HELPER.getString(state, "mActiveTab");
    target.mAttributes = HELPER.getSerializable(state, "mAttributes");
    target.mCommentCount = HELPER.getInt(state, "mCommentCount");
    target.mCommentsIds = HELPER.getWithBundler(state, "mCommentsIds");
    target.mFavorites = HELPER.getWithBundler(state, "mFavorites");
    target.mFlagAsCaptive = HELPER.getBoolean(state, "mFlagAsCaptive");
    target.mFollowingObservation = HELPER.getBoolean(state, "mFollowingObservation");
    target.mIdCount = HELPER.getInt(state, "mIdCount");
    target.mObsJson = HELPER.getString(state, "mObsJson");
    target.mObservation = HELPER.getWithBundler(state, "mObservation");
    target.mObservationSubscriptions = HELPER.getWithBundler(state, "mObservationSubscriptions");
    target.mProjects = HELPER.getWithBundler(state, "mProjects");
    target.mReadOnly = HELPER.getBoolean(state, "mReadOnly");
    target.mReloadTaxon = HELPER.getBoolean(state, "mReloadTaxon");
    target.mTaxon = HELPER.getWithBundler(state, "mTaxon");
    target.mTaxonIdName = HELPER.getString(state, "mTaxonIdName");
    target.mTaxonImage = HELPER.getString(state, "mTaxonImage");
    target.mTaxonJson = HELPER.getString(state, "mTaxonJson");
    target.mTaxonRank = HELPER.getString(state, "mTaxonRank");
    target.mTaxonRankLevel = HELPER.getInt(state, "mTaxonRankLevel");
    target.mTaxonScientificName = HELPER.getString(state, "mTaxonScientificName");
  }
}
