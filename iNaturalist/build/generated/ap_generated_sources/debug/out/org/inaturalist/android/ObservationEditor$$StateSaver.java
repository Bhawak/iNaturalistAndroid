/* *****************************************************************************
 * Copyright (c) 2017 Evernote Corporation.
 * This software was generated by Evernoteâ€™s Android-State code generator
 * (available at https://github.com/evernote/android-state), which is made
 * available under the terms of the Eclipse Public License v1.0
 * (available at http://www.eclipse.org/legal/epl-v10.html).
 * For clarification, code generated by the Android-State code generator is
 * not subject to the Eclipse Public License and can be used subject to the
 * following terms:
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *******************************************************************************/
package org.inaturalist.android;

import android.os.Bundle;
import com.evernote.android.state.Bundler;
import com.evernote.android.state.InjectionHelper;
import com.evernote.android.state.Injector;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;

public class ObservationEditor$$StateSaver<T extends ObservationEditor> extends Injector.Object<T> {
  private static final HashMap<String, Bundler<?>> BUNDLERS = new HashMap<String, Bundler<?>>();

  private static final InjectionHelper HELPER = new InjectionHelper("org.inaturalist.android.ObservationEditor$$StateSaver", BUNDLERS);

  static {
    BUNDLERS.put("mFileUri", new AndroidStateBundlers.UriBundler());
    BUNDLERS.put("mUri", new AndroidStateBundlers.UriBundler());
  }

  @Override
  @SuppressWarnings("unchecked")
  public void save(T target, Bundle state) {
    HELPER.putString(state, "big", target.big);
    HELPER.putBoolean(state, "mAskedForLocationPermission", target.mAskedForLocationPermission);
    HELPER.putStringArrayList(state, "mCameraPhotos", target.mCameraPhotos);
    HELPER.putString(state, "mCapturedPhotoFilePath", target.mCapturedPhotoFilePath);
    HELPER.putBoolean(state, "mChoseNewPhoto", target.mChoseNewPhoto);
    HELPER.putBoolean(state, "mChoseNewSound", target.mChoseNewSound);
    HELPER.putBoolean(state, "mDuplicate", target.mDuplicate);
    HELPER.putWithBundler(state, "mFileUri", target.mFileUri);
    HELPER.putString(state, "mFirstPositionPhotoId", target.mFirstPositionPhotoId);
    HELPER.putBoolean(state, "mFromSuggestion", target.mFromSuggestion);
    HELPER.putBoolean(state, "mGettingLocation", target.mGettingLocation);
    HELPER.putBoolean(state, "mIsCaptive", target.mIsCaptive);
    HELPER.putBoolean(state, "mLocationManuallySet", target.mLocationManuallySet);
    HELPER.putString(state, "mObsJson", target.mObsJson);
    HELPER.putSerializable(state, "mObservation", target.mObservation);
    HELPER.putInt(state, "mOnlineDuplicatedPhotosAndSounds", target.mOnlineDuplicatedPhotosAndSounds);
    HELPER.putBoolean(state, "mPhotoImported", target.mPhotoImported);
    HELPER.putStringArrayList(state, "mPhotosAndSoundsAdded", target.mPhotosAndSoundsAdded);
    HELPER.putBoolean(state, "mPhotosChanged", target.mPhotosChanged);
    HELPER.putSerializable(state, "mPhotosRemoved", target.mPhotosRemoved);
    HELPER.putBoolean(state, "mPictureTaken", target.mPictureTaken);
    HELPER.putString(state, "mPreviousTaxonSearch", target.mPreviousTaxonSearch);
    HELPER.putSerializable(state, "mProjectFieldValues", target.mProjectFieldValues);
    HELPER.putBoolean(state, "mProjectFieldsUpdated", target.mProjectFieldsUpdated);
    HELPER.putIntegerArrayList(state, "mProjectIds", target.mProjectIds);
    HELPER.putBoolean(state, "mReturnToObservationList", target.mReturnToObservationList);
    HELPER.putBoolean(state, "mSharedAudio", target.mSharedAudio);
    HELPER.putBoolean(state, "mSoundRecorded", target.mSoundRecorded);
    HELPER.putBoolean(state, "mSoundsChanged", target.mSoundsChanged);
    HELPER.putSerializable(state, "mSoundsRemoved", target.mSoundsRemoved);
    HELPER.putString(state, "mTaxonPicUrl", target.mTaxonPicUrl);
    HELPER.putString(state, "mTaxonRank", target.mTaxonRank);
    HELPER.putInt(state, "mTaxonRankLevel", target.mTaxonRankLevel);
    HELPER.putWithBundler(state, "mUri", target.mUri);
  }

  @Override
  @SuppressWarnings("unchecked")
  public void restore(T target, Bundle state) {
    target.big = HELPER.getString(state, "big");
    target.mAskedForLocationPermission = HELPER.getBoolean(state, "mAskedForLocationPermission");
    target.mCameraPhotos = HELPER.getStringArrayList(state, "mCameraPhotos");
    target.mCapturedPhotoFilePath = HELPER.getString(state, "mCapturedPhotoFilePath");
    target.mChoseNewPhoto = HELPER.getBoolean(state, "mChoseNewPhoto");
    target.mChoseNewSound = HELPER.getBoolean(state, "mChoseNewSound");
    target.mDuplicate = HELPER.getBoolean(state, "mDuplicate");
    target.mFileUri = HELPER.getWithBundler(state, "mFileUri");
    target.mFirstPositionPhotoId = HELPER.getString(state, "mFirstPositionPhotoId");
    target.mFromSuggestion = HELPER.getBoolean(state, "mFromSuggestion");
    target.mGettingLocation = HELPER.getBoolean(state, "mGettingLocation");
    target.mIsCaptive = HELPER.getBoolean(state, "mIsCaptive");
    target.mLocationManuallySet = HELPER.getBoolean(state, "mLocationManuallySet");
    target.mObsJson = HELPER.getString(state, "mObsJson");
    target.mObservation = HELPER.getSerializable(state, "mObservation");
    target.mOnlineDuplicatedPhotosAndSounds = HELPER.getInt(state, "mOnlineDuplicatedPhotosAndSounds");
    target.mPhotoImported = HELPER.getBoolean(state, "mPhotoImported");
    target.mPhotosAndSoundsAdded = HELPER.getStringArrayList(state, "mPhotosAndSoundsAdded");
    target.mPhotosChanged = HELPER.getBoolean(state, "mPhotosChanged");
    target.mPhotosRemoved = HELPER.getSerializable(state, "mPhotosRemoved");
    target.mPictureTaken = HELPER.getBoolean(state, "mPictureTaken");
    target.mPreviousTaxonSearch = HELPER.getString(state, "mPreviousTaxonSearch");
    target.mProjectFieldValues = HELPER.getSerializable(state, "mProjectFieldValues");
    target.mProjectFieldsUpdated = HELPER.getBoolean(state, "mProjectFieldsUpdated");
    target.mProjectIds = HELPER.getIntegerArrayList(state, "mProjectIds");
    target.mReturnToObservationList = HELPER.getBoolean(state, "mReturnToObservationList");
    target.mSharedAudio = HELPER.getBoolean(state, "mSharedAudio");
    target.mSoundRecorded = HELPER.getBoolean(state, "mSoundRecorded");
    target.mSoundsChanged = HELPER.getBoolean(state, "mSoundsChanged");
    target.mSoundsRemoved = HELPER.getSerializable(state, "mSoundsRemoved");
    target.mTaxonPicUrl = HELPER.getString(state, "mTaxonPicUrl");
    target.mTaxonRank = HELPER.getString(state, "mTaxonRank");
    target.mTaxonRankLevel = HELPER.getInt(state, "mTaxonRankLevel");
    target.mUri = HELPER.getWithBundler(state, "mUri");
  }
}
